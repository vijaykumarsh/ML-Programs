##The purpose of the project is to predict median house values in Californian districts, given many features from these districts

##import packages

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

##import the data
data=pd.read_csv('C:\\Users\\vsn8kor\\Downloads\\Machine_Learning_Projects (1)\\Projects\\Projects for submission\\California Housing Price Prediction\\Dataset for the project\\housing.csv')

##declaring iv,dv
iv=data.iloc[:,0:9].values
#print(pd.DataFrame(iv))
#pd.DataFrame(iv)
dv=data[['median_house_value']].values
#print(pd.DataFrame(dv))
#pd.DataFrame(dv)


from sklearn.preprocessing import Imputer
imputer=Imputer(missing_values="NaN",strategy="mean",axis=0)
imputer=imputer.fit(iv[:,0:8])

iv[:,0:7]=imputer.fit_transform(iv[:,0:7])

# from sklearn.preprocessing import LabelEncoder,OneHotEncoder
# lbl=LabelEncoder()
# iv[:,8]=lbl.fit_transform(iv[:,8])

# Ohe=OneHotEncoder(categorical_features=[8])
# iv=Ohe.fit_transform(iv).toarray()


iv_dummies=pd.get_dummies(iv[:,8])
iv=pd.DataFrame(iv[:,0:7])

iv=pd.concat([iv,iv_dummies],axis=1)
#pd.DataFrame(New_Data)


##Train Test Split

from sklearn.cross_validation import train_test_split
iv_train,iv_test,dv_train,dv_test=train_test_split(iv,dv,test_size=0.2,random_state=0)

##Import standard scaler

from sklearn.preprocessing import StandardScaler
Scale=StandardScaler()

iv_train=Scale.fit_transform(iv_train)
iv_test=Scale.fit_transform(iv_test)


##Performing Linear Regression

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
##Fit train
regressor.fit(iv_train,dv_train)

y_pred=regressor.predict(iv_test)

print('Score:',regressor.score(y_pred,dv_test))

##Compare the pred and actual values

#import sklearn.metrics as metrics 
#metrics.confusion_matrix(y_pred,dv_test)
# plt.plot(y_pred,color='red')
# plt.plot(dv_test,color='yellow')
# plt.show()


#RMSE
from sklearn.metrics import mean_squared_error

#performing Decision Tree Regression
from sklearn.tree import DecisionTreeRegressor
DTRegressor=DecisionTreeRegressor()

DTRegressor.fit(iv_train,dv_train)

##Predicting output

y_pred_DT=DTRegressor.predict(iv_test)
print('Accuracy of DT',mean_squared_error(y_pred_DT,dv_test))

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(dv_test,y_pred_DT)
print(cm)

##Perform Random forest regression

from sklearn.ensemble import RandomForestRegressor
RFRegressor=RandomForestRegressor()

RFRegressor.fit(iv_train,dv_train)

y_pred_T=RFRegressor.predict(iv_test)
#print(pd.DataFrame(y_pred_T))
print('Accuracy of RF',mean_squared_error(y_pred_T,dv_test))


